plugins {
    id("java-library")
    id("aurika.repos")
    id("aurika.dependency")
    alias(libs.plugins.kotlin) apply false
    alias(libs.plugins.shadow) apply false
}

group = "top.mckingdom"
version = "1.0.2"

int targetJavaVersion = 21

subprojects { sub ->

    sub.group = this.group
    sub.version = this.version

    String shortName = sub.name

    String fullName = "Kingdoms-Addon-$shortName"

    apply {
        plugins.apply("java-library")
        plugins.apply("aurika.repos")
        plugins.apply(libs.plugins.kotlin.get().pluginId)
        plugins.apply(libs.plugins.shadow.get().pluginId)
    }

    repositories {
        aurikaRepos {
            spigotMC {
                snapshots()
                releases()
            }
        }
    }

    dependencies {
        api(project(":common:validate"))
        compileOnly(libs.server.spigot)
        compileOnly(libs.annotations.checker)
        compileOnly(libs.xseries)
        compileOnly(fileTree(rootDir.getPath() + "/libs/plugins/Kingdoms_relocated"))
    }

    java {
        withSourcesJar()
        JavaVersion javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }

    tasks {

        build {
            dependsOn(shadowJar)
        }

        compileKotlin {
            kotlinOptions {
                jvmTarget = targetJavaVersion
            }
        }

        jar {
            enabled = false
        }

        shadowJar {
            archiveBaseName = fullName
            archiveClassifier = null

            minimize()

            kingdomsRelocates.kingdomsRelocates()

            relocate("net.aurika", "top.mckingdom.libs.aurika")

            exclude("**/kotlin-stdlib**")
            exclude("**/annotations**")
        }

        processResources {
            def props = [project: new KingdomsAddonProject(fullName, version, description)]
            inputs.properties(props)
            filteringCharset = "UTF-8"
            filesMatching("plugin.yml") {
                expand(props)
            }
        }
    }
}

public class KingdomsAddonProject implements Serializable {
    public String name;
    public String version;
    public String description;

    public KingdomsAddonProject(String name, String version, String description) {
        this.name = name
        this.version = version
        this.description = description
    }
}

//println("Relocators:")
//((ShadowJar) tasks.getByName("shadowJar")).relocators.forEach {
//    println(((SimpleRelocator) it).pattern + "=>" + (it as SimpleRelocator).shadedPattern)
//}
