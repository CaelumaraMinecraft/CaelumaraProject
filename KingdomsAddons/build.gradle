import com.github.jengelman.gradle.plugins.shadow.internal.AbstractDependencyFilter

plugins {
    id("java-library")
    alias(libs.plugins.kotlin) apply false
    alias(libs.plugins.shadow) apply false
}

group = "top.mckingdom"
version = "1.0.2"

def targetJavaVersion = 21

subprojects {

    group = this.group
    version = this.version

    def _name = name

    apply {
        plugins.apply("java-library")
        plugins.apply(libs.plugins.kotlin.get().pluginId)
        plugins.apply(libs.plugins.shadow.get().pluginId)
    }

    dependencies {
        api(project(":common:validate"))
        compileOnly(libs.server.spigot)
        compileOnly(libs.annotations.checker)
        compileOnly(fileTree("$rootDir/libs/plugins/Kingdoms"))
    }

    java {
        withSourcesJar()
        JavaVersion javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }

    tasks {

        build {
            dependsOn(shadowJar)
        }

        compileKotlin {
            kotlinOptions {
                jvmTarget = targetJavaVersion
            }
        }

        jar {
            enabled = false
        }

        shadowJar {
            archiveBaseName = "Kingdoms-Addon-$_name"
            archiveClassifier = null

            minimize()

            relocate("kotlin", "org.kingdoms.libs.kotlin")
            relocate("net.aurika", "top.mckingdom.libs.aurika")

            exclude("**/kotlin-stdlib**")
            exclude("**/annotations**")
        }

        processResources {
            def props = [version: version]
            inputs.properties props
            filteringCharset = "UTF-8"
            filesMatching("plugin.yml") {
                expand(props)
            }
        }
    }
}

class DependencyFilter extends AbstractDependencyFilter {
    DependencyFilter(Project project) {
        super(project)
    }

    @Override
    protected void resolve(
            Set<ResolvedDependency> dependencies,
            Set<ResolvedDependency> includedDependencies,
            Set<ResolvedDependency> excludedDependencies
    ) {
    }
}