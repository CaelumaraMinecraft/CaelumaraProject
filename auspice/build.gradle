plugins {
  id("java-library")
  id("net.aurika.gradle.dependency")
  id("net.aurika.gradle.repository")
  alias(libs.plugins.kotlin)
  alias(libs.plugins.shadow)
}

group = "net.aurika.auspice"
version = "0.0.1-pre"
description = "An minecraft library that allows server owners to easily configure various scripts."

allprojects {
  plugins.apply("net.aurika.gradle.dependency")
  plugins.apply("net.aurika.gradle.repository")

  repositories {
    mavenCentral()
    mavenLocal()

    aurikaRepos {
      spigotMC.releases()
      spigotMC.snapshots()
      paperMC.maven_public()
      purpurMC.snapshots()
      minecraft()
    }
  }
}

dependencies {

  api(libs.kyori.advntr.event)

  // Engines
  api(libs.yamlengine)

  api(libs.caffeine)
  api(libs.guava)

  // Classpath libs
  compileOnlyApi(libs.annotations.checker)
}

int targetJavaVersion = 21

java {
  JavaVersion javaVersion = JavaVersion.toVersion(targetJavaVersion)
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
  if (JavaVersion.current() < javaVersion) {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
  }
}


tasks {

  build {
    dependsOn(shadowJar)
  }

  compileKotlin {
    kotlinOptions {
      jvmTarget = 17
    }
  }

  compileJava {
    options.encoding = "UTF-8"

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
      options.release.set(targetJavaVersion)
    }
  }

  shadowJar {

    enabled = true

    archiveBaseName = "Auspice-MultiPlatform"
    archiveClassifier = null

    relocate("kotlin", "net.aurika.auspice.libs.kotlin")
    relocate("com.github.benmanes.caffeine", "net.aurika.auspice.libs.caffeine")
    relocate("org.snakeyaml.engine", "net.aurika.auspice.libs.snakeyaml")
    relocate("com.google.common", "net.aurika.auspice.libs.google.common")
    relocate("com.cryptomorin.xseries", "net.aurika.auspice.libs.xserise")

  }

  jar {
    enabled = false
  }
}

processResources {
  Map<String, String> props = [version: version]
  inputs.properties(props)
  filteringCharset = "UTF-8"
  filesMatching("plugin.yml") {
    expand(props)
  }
}
